@using BookWriterTool.Helpers
@model book



@{
    
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Editor";
    string statusMsg;
    if (ViewBag.statusMsg != null)
    {
        statusMsg = ViewBag.statusMsg;
    }
    else
    {
        statusMsg = "";
    }

    bookChapterPageFrameContentObject aObject = null;

    int index = 1;


}
<div class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" style="position: fixed; width: 100%; background-color: gainsboro;">
    <div style="text-align: center; width:100%;">

            <span class="ui-icon ui-icon-help"></span>
               <input class="ui-widget ui-widget-content ui-corner-all" id="View2D" type="button" value="2D View" />
                <input class="ui-widget  ui-corner-all" id="View3D" type="button" value="3D View" />
        <input class="ui-widget  ui-corner-all" id="btnAddPage" type="button" value="+" />

       </div>
    </div>

@if (Model != null)
{
    <div class="chapters" id="chapters">
        <div  id="panel2D">
            <!--Chapters section-->
            @foreach (bookChapter chapter in this.Model.chapters)
            {
                <!--Pages section-->
                <div class="pages bb-bookblock" id="@chapter.id">
                    <!--End Pages section-->

                    <!--Frames section-->
                    @foreach (bookChapterPage page in chapter.pages)
                    {
                        <div class="page" id="@page.id">

                            <div class="frame" id="frames">
                                @{
                        foreach (bookChapterPageFrame frame in page.frames)
                        {
                                    <div id="@frame.id" class="droppable">
                                        <div class="GeomForm">

                                            @if (@frame.bordertype == "rectangle")
                                            {
                                                <div  id="@(chapter.id)-@(page.id)-@(frame.id)-rectangle" class="rectangle">
                                                    @Html.Partial("FrameContentFull", (bookChapterPageFrame)ViewBag.Table, new ViewDataDictionary { { "actualFrame", frame }, { "target", "rectangle" } })
                                                </div>
                                            }
                                            else if (@frame.bordertype == "square")
                                            { 

                                                <div id="@(chapter.id)-@(page.id)-@(frame.id)-left" class="squareLeft">
                                                    @Html.Partial("FrameContentSplit", (bookChapterPageFrame)ViewBag.Table, new ViewDataDictionary { { "actualFrame", frame }, { "target", "left" } })
                                                </div>
                                                <div id="@(chapter.id)-@(page.id)-@(frame.id)-right" class="squareRight">
                                                    @Html.Partial("FrameContentSplit", (bookChapterPageFrame)ViewBag.Table, new ViewDataDictionary { { "actualFrame", frame }, { "target", "right" } })
                                                </div>  
                                            }

                                        </div>
                                    </div> 
                        } index++;
                                }
                            </div>
                        </div>
                    }
                    <div class="Container3D" id="Container3D">
                        <p class="header"><span>Unity Web Player | </span>fles</p>
                        <div class="content">
                            <div id="unityPlayer">
                                <div class="missing">
                                    <a href="http://unity3d.com/webplayer/" title="Unity Web Player. Install now!">
                                        <img alt="Unity Web Player. Install now!" src="http://webplayer.unity3d.com/installation/getunity.png" width="193" height="63" />
                                    </a>
                                </div>
                                <div class="broken">
                                    <a href="http://unity3d.com/webplayer/" title="Unity Web Player. Install now! Restart your browser after install.">
                                        <img alt="Unity Web Player. Install now! Restart your browser after install." src="http://webplayer.unity3d.com/installation/getunityrestart.png" width="193" height="63" />
                                    </a>
                                </div>
                            </div>
                        </div>
                        <p class="footer">&laquo; created with <a href="http://unity3d.com/unity/" title="Go to unity3d.com">Unity</a> &raquo;</p>
                    </div>
                    <!--End frames section-->

                </div>
            }
        </div>
     
    </div>
}

<div class="configDialog" id="configDialog">
    <div id="accordionConfig" class="toolbox">
        <h3>@Localization.Localize("files")</h3>
        <div class="leftContent">
            <label>@Localization.Localize("ChooseOption")</label>
           
            <div id="partialFileResult">
                @{
                      @Html.Partial("ListOfBooks", (string[])ViewBag.Table, new ViewDataDictionary { { "listOfBooks",  ViewBag.arrayBooks } })
                }
            </div>
            <div class="addBook" id="div_1">Add new book</div>
        </div>
        <h3>Status</h3>
        <div class="leftContent">
           <span class="ui-icon ui-icon-help"></span>
            
            <div class="edit_area" id="div_2">Lorem ipsum dolor sit amet, consectetuer 
                adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore 
                magna aliquam erat volutpat.</div>
        
            <label>Position X</label>
            <input  id="posX_txtbox" type="text" />
            <label>Position Y</label>
            <input id="posY_txtbox" type="text" />
            <label>Page Name</label>
            <input id="pageName_txtbox" />
            <label>Frame name</label>
            <input id="frameName_txtbox" />
            <label>Target</label>
            <input id="target_txtbox" />
        </div>
        <h3>@Localization.Localize("Languages")</h3>
        <div class="leftContent">
            <ul>
                <li>@Html.ActionLink(@Localization.Localize("English"), "SetCulture", new { controller = "Culture", culture = "en-GB", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                <li>@Html.ActionLink(@Localization.Localize("Spanish"), "SetCulture", new { controller = "Culture", culture = "es-ES", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                <li>@Html.ActionLink(@Localization.Localize("Swedish"), "SetCulture", new { controller = "Culture", culture = "sv-SE", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
            </ul>
        </div>
    </div>
</div>

<div class="configStatus" id="configStatus">
    <div id="accordionStatus" class="toolbox">
        <h3>Frames</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/FrameList.cshtml")

        </div>
        <h3>@Localization.Localize("objects")</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/ObjectList.cshtml")

        </div>
        <h3>@Localization.Localize("backgrounds")</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/BackgroundsList.cshtml")

        </div>
    </div>
</div>
<div id="contentWindow"></div>
<div class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" id='context-menu'>
    <ul>
        <li>Edit</li>
        <li id="ctxMenuDelete">Delete</li>
        <li>Export</li>
    </ul>
    <span hidden="hidden" id="valCtxMenu"></span>
</div>
    <div id="statusDialog">
           <label>Status</label>
        <div id="mssgString">@statusMsg</div>

    </div>
@section scripts
{
    <script>

        var unityObjectUrl = "http://webplayer.unity3d.com/download_webplayer-3.x/3.0/uo/UnityObject2.js";
        var config = {
            width: 660,
            height: 400,
            params: { enableDebugging: "0" }
        };
        var BookModel = {
            ChapterId: "",
            PageId: "",
            Target: "",
            FrameId: "",
            Objects: [],
            Frames: []
        };

        var Objects = {
            ObjectId: "",
            ImageObj: "",
            ScaleX: "",
            ScaleY: "",
            Origo: "",
            Type: ""
        };

        var Frames = {
            Bordertype: ""
        };

        var dialogOpts = {
            position: [300, 5],
            minWidth: 600,
            maxWidth: 600,
            maxHeight: 700,
            minHeight: 700,
            width: 600,
            height: 700,
            close: function() {

            },
            open: function() {
                configurateImgOnTerrain();
            }
        };


        var draggableId = "No Draggable";
        var droppableId = "No droppable";
        var actualFrame;
        var actualPage;
        var actualTarget;
        var actualContent;
        var actualImg;

        var u = new UnityObject2(config);

        jQuery(function() {

            var $missingScreen = jQuery("#unityPlayer").find(".missing");
            var $brokenScreen = jQuery("#unityPlayer").find(".broken");
            $missingScreen.hide();
            $brokenScreen.hide();

            u.observeProgress(function(progress) {
                switch (progress.pluginStatus) {
                case "broken":
                    $brokenScreen.find("a").click(function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        u.installPlugin();
                        return false;
                    });
                    $brokenScreen.show();
                    break;
                case "missing":
                    $missingScreen.find("a").click(function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        u.installPlugin();
                        return false;
                    });
                    $missingScreen.show();
                    break;
                case "installed":
                    $missingScreen.remove();
                    break;
                case "first":
                    break;
                }
            });
            u.initPlugin(jQuery("#unityPlayer")[0], "/Content/Resources/WebPlayer/webviewer.unity3d?book=2");

        });


        $(function() {
            $('.bb-bookblock').booklet({
                width: '65%',
                height: 600,
                speed: 500,
                tabs: true,
                tabWidth: 180,
                tabHeight: 20
            });
            //   $(".rectangle").jqte();
            $("#accordionConfig").accordion();
            $("#accordionStatus").accordion();
            $('#userContent').load('/Book/GetAvailableBooks', { fileOption: "newBook" });
            $(".Container3D").addClass("disableControl");
            if ($("#mssgString").html() != '') {
                $("#statusDialog").dialog({
                    modal: true,
                    buttons: {
                        Ok: function() {
                            $(this).dialog("close");
                        }
                    }
                });
            }
            activateEditorOperations();

        });
        /*Edit on place*/
        $('.addBook').editable('/Book/AddNewBook', {
            indicator: 'Creating book...',
            tooltip: 'Click to add new book...',
            name: 'newFileName'
        });
        $('.edit_area').editable('/Book/AddNewBook', {
            type: 'textarea',
            cancel: 'Cancel',
            submit: 'OK',
            indicator: '<img src="img/indicator.gif">',
            tooltip: 'Click to edit...'
        });
        /*Tree structure for fils and directories*/
        $(function() {
            $("#objectsGroup").jstree({
                "plugins": ["themes", "html_data"]
            });
            $("#characterGroup").jstree({
                "plugins": ["themes", "html_data"]
            });
            $("#expressionGroup").jstree({
                "plugins": ["themes", "html_data"]
            });
            $("#userContent").jstree({
                "plugins": ["themes", "html_data"]
            });
        });
        /*Get selectec item of dropdownbox*/
        $(".selectpicker").change(function() {
            $('#userContent').load('/Book/GetAvailableBooks', { fileOption: "loadBook" });
        });

        function SetBookModel(chapterId, pageId, frameId, target) {
            BookModel.Objects = [];
            BookModel.ChapterId = chapterId,
            BookModel.PageId = pageId;
            BookModel.FrameId = frameId,
            BookModel.Target = target;
        }

        function GetBookModel() {
            return BookModel;
        }

        function SetObjectModel(objectId, imageObj, scaleX, scaleY, origo, type) {
            BookModel.Objects.push({
                ObjectId: objectId,
                ImageObj: imageObj,
                ScaleX: scaleX,
                ScaleY: scaleY,
                Origo: origo,
                Type: type
            });
        }

        function SetFrameModel(bordertype) {
            BookModel.Frames.push({
                Bordertype: bordertype
            });
        }

/*Check html element is empty*/

        function CheckIsEmpty(element) {
            return $.trim($("#" + element).html()).length
        }

/*Add img on content in frame*/
        $('#objectsGroup img').bind("click", function() {
            var randomnumber = Math.floor(Math.random() * 100);
            $('#' + actualContent + " .contentIntern").append('<img width="35" height="70" style="left: 50%;top: 55%;" class="clonedImg" id="Cloned' + randomnumber + '" src="' + $(this).attr("src") + '" />');
            var valuesId = [];
            configurateImgOnTerrain(false);
            if (actualContent != null) {
                valuesId = GetIdFromString(actualContent);
                SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                SetObjectModel("Object" + randomnumber, $(this).attr("src"), null, null, null, null);
                PostArray("AddObjectToContent", GetBookModel());
            }
        });
        /*Add img on content in frame*/
        $('#characterGroup img').bind("click", function() {
            var randomnumber = Math.floor(Math.random() * 1000);
            $('#' + actualContent + " .contentIntern").append('<img width="35" height="70" style="left: 50%;top: 55%;" class="clonedImg" id="Character' + randomnumber + '" src="' + $(this).attr("src") + '" />');
            var valuesId = [];
            configurateImgOnTerrain(false);
            if (actualContent != null) {
                valuesId = GetIdFromString(actualContent);
                SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                SetObjectModel("Character" + randomnumber, $(this).attr("src"), null, null, null, null);
                PostArray("AddCharacter2DToContent", GetBookModel());
            }
        });
        /*Add img on content in frame*/
        $('#expressionGroup img').bind("click", function() {
            var randomnumber = Math.floor(Math.random() * 1000);
            $('#' + actualContent + " .contentIntern").append('<img width="25" height="50" style="left: 50%;top: 55%;" class="clonedImg" id="Expression' + randomnumber + '" src="' + $(this).attr("src") + '" />');
            // alert($(this).attr("src"));
            var valuesId = [];
            configurateImgOnTerrain(true);
            if (actualContent != null) {
                valuesId = GetIdFromString(actualContent);
                SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                SetObjectModel("Expression" + randomnumber, $(this).attr("src"), null, null, null, null);
                PostArray("ExpressionToContent", GetBookModel());
            }
        });

        /*Delete object in content*/
        $("#ctxMenuDelete").click(function() {
            var objId = $("#valCtxMenu").html();
            var valuesId = [];
            if (actualContent != null) {
                $("#" + actualContent + " .contentIntern").find('img').each(function() {
                    if (objId == $(this).attr("id")) {
                        $(this).remove();
                        //alert(actualContent);
                        valuesId = GetIdFromString(actualContent);
                        SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                        SetObjectModel(objId, null, null, null, null, null);
                        PostArray("DeleteObjectFromContent", GetBookModel());
                    }
                    destroyContextMenu();
                });
            } else {
                alert("ERROR.Can't find element");
            }
        });
        /*Start drag effect on element*/

        function startDragNoLimit(element) {
            $(element).draggable({
                cursor: 'move',
                containment: "parent",
                drag: function(event, ui) {
                    draggableId = $(this).attr("id");

                }
            });
        }

        /*Strat drag effect on element*/

        function startDrag(element) {
            $(element).draggable({
                axis: "x",
                cursor: 'move',
                containment: "parent",
                drag: function(event, ui) {
                    draggableId = $(this).attr("id");
                    //  alert("StartDrag");
                    var offset = $(this).offset();
                    var imgHeight = parseInt($("#" + draggableId).css("height"), 10);
                    var xPos = offset.left;
                    var yPos = offset.top - imgHeight;
                    $('#posX_txtbox').val('xw: ' + xPos);
                    $('#posY_txtbox').val('yw: ' + yPos);
                }
            });
        }

/*Activate editor for frame*/

        function activateEditorOperations() {
            $(".editPencil").click(function(e) {
                $(".squareLeft").css({ "-webkit-border-image": "url(../Images/border.png) 25 25 round" });
                $(".squareRight").css({ "-webkit-border-image": "url(../Images/border.png) 25 25 round" });
                $(".rectangle").css({ "-webkit-border-image": "url(../Images/border.png) 25 25 round" });
                $(this).parent().css({ "-webkit-border-image": "url(../Images/border.png) 8 8 round" });
                if ($("#" + actualContent + " .droppable img") != 'undefined') {
                    $("#" + actualContent + " .droppable img").draggable("destroy");
                }
                actualContent = $(this).parent().attr("id");
                configurateImgOnTerrain();
            });
        }

/*Add some more functions to added image on content frame*/

        function configurateImgOnTerrain(status) {
            $('#' + actualContent + ' .droppable img').each(function() {

                if (status) {
                    startDragNoLimit($(this));
                } else {
                    startDrag($(this));
                }

                $(this).bind('contextmenu', function(e) {
                    $('#context-menu').css('left', e.pageX + 'px');
                    $('#context-menu').css('top', e.pageY + 'px');
                    $('#context-menu').css('z-index', 10);
                    $("#valCtxMenu").html($(this).attr("id"));
                    $('#context-menu').show();
                    e.preventDefault();
                    return false;
                });
            });
        }

/*Change background image of terrain*/
        $(".backgroundContain").click(function() {
            //  var descriptionArray = [];
            var valuesId = [];
            var bk = $(this).attr("id");
            var imgChosen = $("#" + bk).attr("src");

            if (actualContent != null) {
                valuesId = GetIdFromString(actualContent);
                SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                SetObjectModel(bk, $(this).attr("src"), null, null, null, null);
                $("#" + actualContent + " .contentIntern").css("background-image", "url(" + imgChosen + ")");
                PostArray("AddBackgroundToFrame", GetBookModel());

            }
        });

        /*Add new page*/
        $("#btnAddPage").click(function() {
            //var descriptionArray = [];
            SetBookModel("chapter1", null, null, null);
            PostArray("AddPage", GetBookModel());
            reloadPage();
        });


        /*Function handle draggable objects. 
                 Objects you pickup and drag*/
        $(function() {
            $("#framesGroup .draggable").draggable({
                cursor: 'move',
                helper: 'clone',
                drag: function(event, ui) {
                    draggableId = $(this).attr("id");
                    //alert("group");
                }
            }).addClass("ui-state-highlight");


            /*Function handle droppable frames objects. 
                          Object where you put your draggable*/
            $(".frame .droppable").droppable({
                drop: function(event, ui) {
                    var htmlContent = "<div class='editPencil'><span class='ui-icon ui-icon-pencil'></span></div>"
                        +
                        "<div class='droppable contentIntern ui-droppable' style='background-image: url(../Images/rectangle.png)'></div>";

                    if ((draggableId == "rectangle") || (draggableId == "square")) {

                        //Add frames in page
                        var valuesId = [];
                        var originalId = $(this).find(".GeomForm :first-child").attr("id");
                        //alert(originalId);
                        valuesId = GetIdFromString(originalId);
                        SetBookModel(valuesId[0], valuesId[1], valuesId[2], draggableId);

                        PostArray("AddFrame", GetBookModel());
                        $(this).find("div").html("");
                        if (draggableId == "rectangle") {
                            var rectangleId = SplitAndConcanate(originalId, "rectangle");
                            $(this).find("div").prepend("<div  id=" + rectangleId + " class='rectangle'>" + htmlContent + "</div>");
                        } else if (draggableId == "square") {
                            var squareLeftId = SplitAndConcanate(originalId, "left");
                            var squareRightId = SplitAndConcanate(originalId, "right");
                            $(this).find("div").prepend("<div  id=" + squareLeftId + " class='squareLeft'>" + htmlContent + "</div><div  id=" + squareRightId + " class='squareRight'>" + htmlContent + "</div>");
                        }
                        activateEditorOperations();

                        $("#" + draggableId).css({ position: "relative", bottom: 0, left: 0 });
                        $("#" + draggableId).show();
                    } else {
                        // alert( $("#"+draggableId).parent().parent().attr("id"));
                        //  var descriptionArray = [];
                        valuesId = GetIdFromString($("#" + draggableId).parent().parent().attr("id"));
                        SetBookModel(valuesId[0], valuesId[1], valuesId[2], valuesId[3]);
                        SetObjectModel(draggableId, null, null, null, null, null);
                        //descriptionArray.push(actualContent + "-" + $($(this).find("img").attr("id")).attr("src"));
                        // PostArray("UpdateObjectPosition", GetBookModel());
                    }
                }
            });
        });

        function GetIdFromString(stringToSplit) {
            var arrayId = stringToSplit.split('-');
            return arrayId;
        }

        /*Start Context menu events*/
        $('html').click(function(e) {
            $('#context-menu').hide();
            $("#valCtxMenu").text('');
            e.stopPropagation();
        });
        $('#context-menu').click(function(e) {
            $("#valCtxMenu").text('');
            e.stopPropagation();
        });
        $(window).resize(function() {
            $('#context-menu').hide();
            $("#valCtxMenu").text('');
        });

        function destroyContextMenu() {
            $('#context-menu').hide();
            $("#valCtxMenu").text('');
        }

/*End of contextmenu events*/


        /*Change Id name of element and replace*/

        function SplitAndConcanate(stringToSplit, valueToInsert) {
            var splitString = stringToSplit.split('-');
            var result;
            splitString[splitString.length - 1] = valueToInsert;
            result = splitString.join('-');
            return result;
        }

        /*Toggle between 2D and 3D View*/
        /*----------------------------------------------*/
        $("#View3D").bind("click", function() {
            $(".pages #frames").each(function(i, elem) {
                $(this).hide(500);
            });
            $("#Container3D").appendTo($("#pages"));
            $(".Container3D").removeClass("disableControl");
            $(".Container3D").addClass("activeControl");
        });

        $("#View2D").bind("click", function() {
            $(".pages #frames").each(function(i, elem) {
                $(this).show(500);
            });
            $(".Container3D").removeClass("activeControl");
            $(".Container3D").addClass("disableControl");
        });
        /*--------------------------------------------*/


        function reloadPage() {
            $("body").fadeOut(
                function() {
                    location.reload(true);
                    $(document).ready(function() { $(body).fadeIn(); });
                });
        }

        function AddTextToStatus(mssg) {
            $("#statusDialog").val(mssg);
        }

        /*All post data to controller go thorugh this function*/

        function PostArray(url, descriptionArray) {
            jQuery.ajax({
                type: 'POST',
                url: url,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(BookModel),
                async: false,
                dataType: "json",
                success: function(statusMsg) {
                    descriptionArray.length = 0;
                },
                error: function(statusMsg) {
                    AddTextToStatus("Couldn't send message.Wrong parameters");
                }
            });
        }

    </script>
}


