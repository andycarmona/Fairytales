@using BookWriterTool.Helpers
@model book



@{
    
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Editor";
    string statusMsg;
    if (ViewBag.statusMsg != null)
    {
        statusMsg = ViewBag.statusMsg;
    }
    else
    {
        statusMsg = "No message";
    }
    bookChapterPageFrameContent contentframe;
    bookChapterPageFrameContentObject aObject = null;
    int contentIndex = 0;
    object contentObj;
    int index = 1;
    int chapterIndex = 1;
    int pageIndex = 1;
    var listOfBooks = new string[1];
    var listOfObjects = new List<bookChapterPageFrameContentObject> { aObject };
    listOfBooks[0] = "no book";
}
<div id="panel">
    @if (Model != null)
    {
        <div class="chapters" id="chapters">

            <ul>
                @foreach (bookChapter chapter in @Model.chapters)
                {
                    <li><a href="#@chapter.id">@Localization.Localize("chapter")@(chapterIndex++)</a></li>
                }
            </ul>
            <!--Chapters section-->
            @for (int indexChapters = 0; indexChapters < @Model.chapters.Length; indexChapters++)
            {

                <!--Pages section-->
                <div class="pages" id="@Model.chapters[indexChapters].id">

                    <ul>
                        @foreach (bookChapterPage page in @Model.chapters[indexChapters].pages)
                        {
                            <li><a href="#@page.id">@Localization.Localize("page")@(pageIndex++)</a></li>
                    
                        }
                        <li>@{ pageIndex = 1; }
                            <button id="btnAddPage" type="button" value="+">+</button></li>
                    </ul>
                    <!--End Pages section-->

                    <!--Frames section-->
                    @for (int indexPages = 0; indexPages < @Model.chapters[indexChapters].pages.Length; indexPages++)
                    {
                        <div class="page" id="@Model.chapters[indexChapters].pages[indexPages].id">

                            <div class="frame" id="frames">
                                @foreach (bookChapterPageFrame frame in @Model.chapters[indexChapters].pages[indexPages].frames)
                                {
                  
                                    <div id="@frame.id" class="droppable">
                                        <img id="img@(frame.id)" border="0" width="700" height="158" alt="" src="~/Images/@(frame.bordertype).png" />

                                    </div> 
                                    <div id="objects">
                                        <span>Frame: @(frame.id)</span>
                                        <span id="bordertypeIdentifier">Bordertype: @(frame.bordertype)</span>
                                        <button class="editContent" type="button" value="@(frame.id)">Edit</button>
                                    </div>
                                }  @{ index++; }

                            </div>
                        </div>
                    }
                    <!--End frames section-->

                </div>
            }
        </div>
    }

    <div class="configDialog" id="configDialog">
        <div id="accordionConfig" class="toolbox">
            <h3>@Localization.Localize("files")</h3>
            <div class="leftContent">
                <label>@Localization.Localize("ChooseOption")</label>
                <select class="selectpicker" id="selectpicker">
                    <option value="newBook">@Localization.Localize("NewBook")</option>
                    <option value="loadBook">@Localization.Localize("LoadABook")</option>
                </select>
                <div id="partialFileResult">
                    @{
                        this.Html.RenderPartial("~/Views/Book/ListOfBooks.cshtml", @listOfBooks);
                    }
                </div>

            </div>
            <h3>Status</h3>
            <div class="leftContent">
                <label>Status</label>
                <textarea id="status" style="width: 150px" cols="20" rows="10"></textarea>
                <div id="contentWindow">
                    aaaaa
                </div>
            </div>
            <h3>@Localization.Localize("Languages")</h3>
            <div class="leftContent">
                <ul>
                    <li>@Html.ActionLink(@Localization.Localize("English"), "SetCulture", new { controller = "Culture", culture = "en-GB", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                    <li>@Html.ActionLink(@Localization.Localize("Spanish"), "SetCulture", new { controller = "Culture", culture = "es-ES", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                    <li>@Html.ActionLink(@Localization.Localize("Swedish"), "SetCulture", new { controller = "Culture", culture = "sv-SE", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                </ul>
            </div>
        </div>
    </div>
    }

    <div id="statusMsg">@statusMsg</div>

    <div class="configStatus" id="configStatus">
        <div id="accordionStatus" class="toolbox">
            <h3>Frames</h3>
            <div class="leftContent">

                @Html.Partial("~/Views/Book/FrameList.cshtml")

            </div>
            <h3>@Localization.Localize("objects")</h3>
            <div class="leftContent">

                @Html.Partial("~/Views/Book/ObjectList.cshtml")

            </div>
            <h3>@Localization.Localize("backgrounds")</h3>
            <div class="leftContent">

                @Html.Partial("~/Views/Book/BackgroundsList.cshtml")

            </div>
        </div>
    </div>
    <div id="DialogEditorFrames">
        <div class="FrameEdit" id="FrameEdit">
            <div class="droppable" id="terrain">
                
               
            </div>
        </div>
        <div class="objConfigurator">
            <label>Position X</label>
            <input id="posX_txtbox" type="text"  />
            <label>Position Y</label>
            <input id="posY_txtbox" type="text" />
        </div>

    </div>
    }
    @section scripts
    {
        <script>
            var draggableId = "No Draggable";
            var droppableId = "No droppable";
            var startPos;
            var textArea = "";
            var actualPage = 1;

            var framesContent = $('div#frames');
            var dialogOpts = {
                position: [50, 5],
                minWidth: 600,
                maxWidth: 600,
                maxHeight: 700,
                minHeight: 700,
                width: 600,
                height: 700
            };
            $(function() {
                $("#pages").tabs();
                $("#chapters").tabs();
                $("#chapter1").tabs();
                $("#chapter2").tabs();
                $("#DialogEditorFrames").dialog(dialogOpts);
                $("#accordionConfig").accordion();
                $("#accordionStatus").accordion();
                $('#userContent').load('/Book/GetAvailableBooks', { fileOption: "newBook" });
            });
            $(".selectpicker").change(function() {

                $('#userContent').load('/Book/GetAvailableBooks', { fileOption: $(this).val() });

            });
            
            $("#objectsGroup img").click(function () {
                alert($(this).attr("id"));
                $('#terrain').prepend('<div class="draggable"><img class="object" id="Cloned' + $(this).attr("id") + '" src="' + $(this).attr("src") + '" /></div>');
            }); 
            
            $("#editContent").click(function() {
                alert($(this).val());
                $.post("/Book/GetListObjectsInframe", { indexChapters: 0, indexPages: 0, target: "left" }, function(data) {

                    GetObjectComplete(data);
                });
            });

            function GetObjectComplete(result) {

                $("#contentWindow").html(result.ObjectInquiryView);

            }

            $(".backgroundContain").click(function() {
                var bk = $(this).attr("id");
                var imgChosen = $("#" + bk).attr("src");
                // alert($(this).attr("id"));
                // alert($("#" + bk).attr("src"));
                $("#terrain").css("background-image", "url(" + imgChosen + ")");
            });

            $("#btnAddPage").click(function() {
                var descriptionArray = [];
                descriptionArray.push("chapter1");
                AddTextToStatus(descriptionArray[0]);
                PostArray("AddPage", descriptionArray);
                //Reload tab control
                // $('#chapters').tabs('load', 0);
            });

            $("#btnAddChapter").click(function() {
                //  var id = this.value;
            });

            function AddTextToStatus(mssg) {
                $("#status").val($("#status").val() + mssg + "\n");
            }

            function GetAccordionStatusIndex() {
                return $("#accordionStatus").accordion("option", "active");
            }

            $("#accordionStatus").accordion({
                active: 0,
                change: function(event, ui) {
                    var activeIndex = $("#accordionStatus").accordion("option", "active");
                    //alert(activeIndex);
                    switch (activeIndex) {
                    case 0:
                        // $('#chapter2').show();
                            // $('#chapter1').show();
                        break;
                    case 1:
                        // $("#ContentEdit").show();
                            // $('#chapter2').hide();
                            // $('#chapter1').hide();
                        break;
                    default:
                    }

                }
            });
            /*Function handle draggable objects. 
                 Objects you pickup and drag*/

            $(function() {
                $("#framesGroup .draggable").draggable({
                    cursor: 'move',
                    helper: 'clone',
                    drag: function(event, ui) {
                        draggableId = $(this).attr("id");

                    }
                }).addClass("ui-state-highlight");


                /*Function handle droppable frames objects. 
                          Object where you put your draggable*/
                $(".frame .droppable").droppable({
                    drop: function(event, ui) {
                        var pageIdAtributte = $(this).parent().parent().parent().attr("id");
                        var descriptionArray = [];
                        droppableId = $(this).attr("id");
                        //alert(droppableId);
                        //Add frames in page
                        $(this).each(function(i, elem) {
                            var frameId = $(elem).attr("id");

                            descriptionArray.push(pageIdAtributte + "-" + frameId + "-" + draggableId);
                        });
                        if (droppableId != draggableId) {
                            PostArray("AddContentToFrame", descriptionArray);
                        }
                        var temp = $(this).attr("id").substring(0, 5);

                        if (temp === "frame") {
                            $(this).find("img").attr("src", "../Images/" + draggableId + ".png");
                        } else {

                        }
                        $("#" + draggableId).css({ position: "relative", top: 0, left: 0 });
                        $("#" + draggableId).show();
                    }
                });
            });

            /*Draggable for object on frames*/
            $("#terrain .draggable").draggable({
                cursor: 'move',
                containment: "parent",
                drag: function(event, ui) {
                    draggableId = $(this).attr("id");
                    var offset = $(this).offset();
                    var imgHeight = parseInt($("#" + draggableId).css("height"), 10);
                    var xPos = offset.left;
                    var yPos = offset.top - imgHeight;
                    $('#posX_txtbox').val('x: ' + xPos);
                    $('#posY_txtbox').val('y: ' + yPos);
                }
            }).addClass("ui-state-highlight");
            /*Function handle droppable  objects. 
                       Object where you put your draggable*/
            $(".FrameEdit .droppable").droppable({
                drop: function(event, ui) {

                    droppableId = $(this).attr("id");
                    // alert(droppableId);
                }
            });
            /*All post data to controller go thorugh this function*/

            function PostArray(url, descriptionArray) {
                jQuery.ajax({
                    type: 'POST',
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(descriptionArray),
                    async: false,
                    dataType: "json",
                    success: function(statusMsg) {

                        descriptionArray.length = 0;
                    },
                    error: function(statusMsg) {
                        AddTextToStatus("Couldn't send message.Wrong parameters");
                    }
                });
            }

        </script>
    }
</div>
