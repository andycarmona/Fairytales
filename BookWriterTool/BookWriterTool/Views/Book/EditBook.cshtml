@using BookWriterTool.Helpers
@model book



@{
    
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Editor";
    string statusMsg;
    if (ViewBag.statusMsg != null)
    {
        statusMsg = ViewBag.statusMsg;
    }
    else
    {
        statusMsg = "No message";
    }
    bookChapterPageFrameContent contentframe;
    bookChapterPageFrameContentObject aObject = null;
    int contentIndex = 0;
    object contentObj;
    int index = 1;
    int chapterIndex = 1;
    int pageIndex = 1;
    var listOfBooks = new string[1];
    var listOfObjects = new List<bookChapterPageFrameContentObject> { aObject };
    listOfBooks[0] = "no book";
    bool avoidStep;
}
<div class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" style="position: fixed; width: 100%; background-color: gainsboro;">
    <div style="text-align: center; width: 200px;">
        <a href="some_url">
            <span class="ui-icon ui-icon-help"></span>
        </a>
    </div>
</div>
@if (Model != null)
{
    <div class="chapters" id="chapters">

        <ul>
            @foreach (bookChapter chapter in @Model.chapters)
            {
                <li><a href="#@chapter.id">@Localization.Localize("chapter")@(chapterIndex++)</a></li>
            }
        </ul>
        <div id="panel2D">
            <!--Chapters section-->
            @foreach (bookChapter chapter in this.Model.chapters)
            {
                @:<!--Pages section-->
                <div class="pages" id="@chapter.id">

                    <ul class="pageItems">
                        @foreach (bookChapterPage page in chapter.pages)
                        {
                            <li><a href="#@page.id">@Localization.Localize("page")@(pageIndex++)</a></li>
                    
                        }
                        <li>
                            @{
                        pageIndex = 1;
                            }
                            <button id="btnAddPage" type="button" value="+">+</button></li>
                    </ul>
                    <!--End Pages section-->

                    <!--Frames section-->
                    @foreach (bookChapterPage page in chapter.pages)
                    {
                        <div class="page" id="@page.id">

                            <div class="frame" id="frames">
                                @{
                        foreach (bookChapterPageFrame frame in page.frames)
                        {
                            avoidStep = false;
                                    <div id="@frame.id" class="droppable">
                                        <img id="img@(frame.id)"   border="0" width="700" height="120" alt="" src="~/Images/@(frame.bordertype).png" />
                                  
                                        <div id="contents">
                                            @if (frame.contents != null)
                                            {
                                                foreach (bookChapterPageFrameContent content in frame.contents)
                                                {

                                                    if (@frame.bordertype == "rectangle")
                                                    {
                                                        if (!avoidStep)
                                                        {
                                                <button  class="editContent" type="button" value="@(chapter.id)-@(page.id)-@(frame.id)-">Rectangle edit</button>
                                                        }
                                                        avoidStep = true;
                                                    }
                                                    else if (@content.target == "left")
                                                    {
                                                <button  class="editContent" type="button" value="@(chapter.id)-@(page.id)-@(frame.id)-left">Left edit</button>
                                            
                                                    }
                                                    else if (@content.target == "right")
                                                    {
                                                <button  class="editContent" type="button" value="@(chapter.id)-@(page.id)-@(frame.id)-right">Right edit</button>
                                                    }

                                                }
                                            }
                                        </div>
                                    </div> 
                                    <div id="objects">
                                        <span style="visibility: hidden;">Frame: @frame.id</span>
                                        <span style="visibility: hidden;" id="bordertypeIdentifier">Bordertype: @frame.bordertype</span>

                                    </div>
                        } index++;
                                }
                            </div>

                        </div>
                    }
                    <div class="Container3D" id="Container3D">
                        <p class="header"><span>Unity Web Player | </span>fles</p>
                        <div class="content">
                            <div id="unityPlayer">
                                <div class="missing">
                                    <a href="http://unity3d.com/webplayer/" title="Unity Web Player. Install now!">
                                        <img alt="Unity Web Player. Install now!" src="http://webplayer.unity3d.com/installation/getunity.png" width="193" height="63" />
                                    </a>
                                </div>
                                <div class="broken">
                                    <a href="http://unity3d.com/webplayer/" title="Unity Web Player. Install now! Restart your browser after install.">
                                        <img alt="Unity Web Player. Install now! Restart your browser after install." src="http://webplayer.unity3d.com/installation/getunityrestart.png" width="193" height="63" />
                                    </a>
                                </div>
                            </div>
                        </div>
                        <p class="footer">&laquo; created with <a href="http://unity3d.com/unity/" title="Go to unity3d.com">Unity</a> &raquo;</p>
                    </div>
                    <!--End frames section-->

                </div>
                
            }

        </div>

        <div class="ViewChanger" id="ViewChanger">
            <ul>
                <input class="ui-widget ui-widget-content ui-corner-all" id="View2D" type="button" value="2D View" />
                <input class="ui-widget  ui-corner-all" id="View3D" type="button" value="3D View" />
            </ul>
        </div>
    </div>  

}

<div class="configDialog" id="configDialog">
    <div id="accordionConfig" class="toolbox">
        <h3>@Localization.Localize("files")</h3>
        <div class="leftContent">
            <label>@Localization.Localize("ChooseOption")</label>
            <select class="selectpicker" id="selectpicker">
                <option value="newBook">@Localization.Localize("NewBook")</option>
                <option value="loadBook">@Localization.Localize("LoadABook")</option>
            </select>
            <div id="partialFileResult">
                @{
                    this.Html.RenderPartial("~/Views/Book/ListOfBooks.cshtml", @listOfBooks);
                }
            </div>

        </div>
        <h3>Status</h3>
        <div class="leftContent">
            <label>Status</label>
            <textarea id="status" style="width: 150px" cols="20" rows="10"></textarea>

        </div>
        <h3>@Localization.Localize("Languages")</h3>
        <div class="leftContent">
            <ul>
                <li>@Html.ActionLink(@Localization.Localize("English"), "SetCulture", new { controller = "Culture", culture = "en-GB", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                <li>@Html.ActionLink(@Localization.Localize("Spanish"), "SetCulture", new { controller = "Culture", culture = "es-ES", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
                <li>@Html.ActionLink(@Localization.Localize("Swedish"), "SetCulture", new { controller = "Culture", culture = "sv-SE", returnUrl = HttpContext.Current.Request.RawUrl }, new { Class = "btn btn-lg btn-primary" })</li>
            </ul>
        </div>
    </div>
</div>


<div id="statusMsg">@statusMsg</div>

<div class="configStatus" id="configStatus">
    <div id="accordionStatus" class="toolbox">
        <h3>Frames</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/FrameList.cshtml")

        </div>
        <h3>@Localization.Localize("objects")</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/ObjectList.cshtml")

        </div>
        <h3>@Localization.Localize("backgrounds")</h3>
        <div class="leftContent">

            @Html.Partial("~/Views/Book/BackgroundsList.cshtml")

        </div>
    </div>
</div>
<div id="contentWindow"></div>

@section scripts
{
    <script>
 
            var unityObjectUrl = "http://webplayer.unity3d.com/download_webplayer-3.x/3.0/uo/UnityObject2.js";
            var config = {
                width: 660,
                height: 400,
                params: { enableDebugging: "0" }
            };

            var dialogOpts = {
                position: [300, 5],
                minWidth: 600,
                maxWidth: 600,
                maxHeight: 700,
                minHeight: 700,
                width: 600,
                height: 700,
                close: function() {
                    $("#DialogEditorFrames").dialog("destroy");
                    $("#terrain").remove();
                    $("#terrain").html("");
                    $('#terrain').empty();
                    clearImages();
                },
                open: function() {
                   configurateImgOnTerrain();
                }
            };


            var draggableId = "No Draggable";
            var droppableId = "No droppable";
            var actualFrame;
            var actualPage;
            var actualTarget;
            var u = new UnityObject2(config);

            jQuery(function() {
            
                    var $missingScreen = jQuery("#unityPlayer").find(".missing");
                    var $brokenScreen = jQuery("#unityPlayer").find(".broken");
                    $missingScreen.hide();
                    $brokenScreen.hide();

                    u.observeProgress(function(progress) {
                        switch (progress.pluginStatus) {
                        case "broken":
                            $brokenScreen.find("a").click(function(e) {
                                e.stopPropagation();
                                e.preventDefault();
                                u.installPlugin();
                                return false;
                            });
                            $brokenScreen.show();
                            break;
                        case "missing":
                            $missingScreen.find("a").click(function(e) {
                                e.stopPropagation();
                                e.preventDefault();
                                u.installPlugin();
                                return false;
                            });
                            $missingScreen.show();
                            break;
                        case "installed":
                            $missingScreen.remove();
                            break;
                        case "first":
                            break;
                        }
                    });
                    u.initPlugin(jQuery("#unityPlayer")[0], "/Content/Resources/WebPlayer/webviewer.unity3d?book=2");
              
                });
            

            $(function() {
                $("#pages").tabs();
                $("#chapters").tabs();
                $("#chapter1").tabs();
                $("#chapter2").tabs();
                $("#chapter3").tabs();
               // $("#DialogEditorFrames").dialog(dialogOpts);
                $("#accordionConfig").accordion();
                $("#accordionStatus").accordion();
                $('#userContent').load('/Book/GetAvailableBooks', { fileOption: "newBook" });
                $(".Container3D").addClass("disableControl");

            });
           /* $('.map').mouseover(function() {
                $('area').mapster('select');

            }).mouseout(function() {

            });
            $('#imgframe1').mapster({
                mapKey: 'data-group',
                stroke: true,
                strokeWidth: 2,
                strokeColor: 'ff0000'
            });*/

            /* 
            $(".pages .pageItems").each(function (i, elem) {
                $(this).children('li').children('a').on("click", function (e) { 
                    actualPage= $(this).attr("href").substr(1,$(this).attr("href").length);
                });
       
            });
            */
            $('#objectsGroup img').bind("click", function() {
                var descriptionArray = [];
                var randomnumber = Math.floor(Math.random() * 100);
                $('#terrain').append('<img  id="Cloned' + randomnumber + '" src="' + $(this).attr("src") + '" />');

               configurateImgOnTerrain();
               descriptionArray.push(actualPage + "-" + actualFrame + "-" + $(this).attr("src"));
                PostArray("AddObjectToContent", descriptionArray);
            });

            // When adding a object I need to get information about page and chapter webgl area on


            /*Clear all images in terrain*/

            function clearImages() {
                $('#terrain img').each(function() {
                    $(this).remove();
                });
            }


            function startDrag(element) {
                $(element).draggable({
                    cursor: 'move',
                    containment: "parent",
                    drag: function(event, ui) {
                        draggableId = $(this).attr("id");
                        //  alert("StartDrag");
                        var offset = $(this).offset();
                        var imgHeight = parseInt($("#" + draggableId).css("height"), 10);
                        var xPos = offset.left;
                        var yPos = offset.top - imgHeight;
                        $('#posX_txtbox').val('xw: ' + xPos);
                        $('#posY_txtbox').val('yw: ' + yPos);
                    }
                });
                //StartDrag(element);
            }

            $(".editContent").click(function() {

                //alert($(this).val());
                var resultFrame = $(this).val();
               // $('#contentWindow').append("#DialogEditorFrames");
                var splitedString = resultFrame.split('-');
                actualPage = splitedString[1];
                actualFrame = splitedString[2];
                actualTarget = splitedString[3];
               /* $("#target_txtbox").val(splitedString[3]).change();*/
                $.post("/Book/GetListObjectsInframe", { resultFrame: resultFrame }, function(data) {
                    getObjectComplete(data);
                });
            });

            /*Function callback wich get List of objects in frame*/

            function getObjectComplete(result) {
               $('#contentWindow').append("#DialogEditorFrames");
                $("#contentWindow").html(result.ObjectInquiryView);
                $("#DialogEditorFrames").dialog(dialogOpts);
              // alert("cuando el objeto esta completo");
                configurateImgOnTerrain();

            }

            function configurateImgOnTerrain() {
                $('#terrain img').each(function() {
                    startDrag($(this));
                    AddTextToStatus($(this).attr("id"));
                    $("#pageName_txtbox").val(actualPage);
                    $("#frameName_txtbox").val(actualFrame);
                    $("#target_txtbox").val(actualTarget);
                   //  alert("dentro de configuraacion para terrain");
                    $(this).bind('contextmenu', function(e) {

                        $('#context-menu').css('left', e.pageX + 'px');
                        $('#context-menu').css('top', e.pageY + 'px');
                        $('#context-menu').css('z-index', 10);
                        $("#valCtxMenu").html($(this).attr("id"));
                        $('#context-menu').show();
                        e.preventDefault();
                        return false;
                    });
                });
            }

/*Start Context menu events*/
            $('html').click(function(e) {
                $('#context-menu').hide();
                $("#valCtxMenu").text('');
            });
            $('#context-menu').click(function(e) {
                $("#valCtxMenu").text('');
                e.stopPropagation();
            });
            $(window).resize(function() {
                $('#context-menu').hide();
                $("#valCtxMenu").text('');
            });
            /*End of contextmenu events*/

            /*Function handle draggable objects. 
                 Objects you pickup and drag*/
            $(function() {
                $("#framesGroup .draggable").draggable({
                    cursor: 'move',
                    helper: 'clone',
                    drag: function(event, ui) {
                        draggableId = $(this).attr("id");
                        //alert("group");
                    }
                }).addClass("ui-state-highlight");


                /*Function handle droppable frames objects. 
                          Object where you put your draggable*/
                $(".frame .droppable").droppable({
                    drop: function(event, ui) {
                        var pageIdAtributte = $(this).parent().parent().attr("id");
                        var descriptionArray = [];
                        droppableId = $(this).attr("id");

                        //Check if the object to be dropped is a Cloned object
                        //This is triying to avoid conflict with other draggable obejects on page
                        if (draggableId.substr(0, 6) != "Cloned") {
                            //Add frames in page
                            $(this).each(function(i, elem) {
                                var frameId = $(elem).attr("id");

                                descriptionArray.push(pageIdAtributte + "-" + frameId + "-" + draggableId);
                            });
                            if (droppableId != draggableId) {
                                PostArray("AddContentToFrame", descriptionArray);
                            }
                            var temp = $(this).attr("id").substring(0, 5);

                            if (temp === "frame") {
                                $(this).find("img").attr("src", "../Images/" + draggableId + ".png");
                            } else {

                            }
                            $("#" + draggableId).css({ position: "relative", top: 0, left: 0 });
                            $("#" + draggableId).show();
                        } else {


                            /*Handle droppable  objects. Object where you put your draggable*/
                            //droppableId = $(this).attr("id");
                            //alert(droppableId);
                        }
                    }
                });
            });


            /*Toggle between 2D and 3D View*/
            /*----------------------------------------------*/
            $("#View3D").bind("click", function() {
                $(".pages #frames").each(function(i, elem) {
                    $(this).hide(500);
                });
                $("#Container3D").appendTo($("#pages"));
                $(".Container3D").removeClass("disableControl");
                $(".Container3D").addClass("activeControl");
            });

            $("#View2D").bind("click", function() {
                $(".pages #frames").each(function(i, elem) {
                    $(this).show(500);
                });
                $(".Container3D").removeClass("activeControl");
                $(".Container3D").addClass("disableControl");
            });
            /*--------------------------------------------*/

            /*Get selecte item of dropdownbox*/
            $(".selectpicker").change(function() {

                $('#userContent').load('/Book/GetAvailableBooks', { fileOption: $(this).val() });

            });

            /*Change background image of terrain*/
            $(".backgroundContain").click(function() {
                var bk = $(this).attr("id");
                var imgChosen = $("#" + bk).attr("src");
                $("#terrain").css("background-image", "url(" + imgChosen + ")");
            });

            /*Add new page*/
            $("#btnAddPage").click(function() {
                var descriptionArray = [];
                descriptionArray.push("chapter1");
                AddTextToStatus(descriptionArray[0]);
                PostArray("AddPage", descriptionArray);
            });

            function AddTextToStatus(mssg) {
                $("#status").val($("#status").val() + mssg + "\n");
            }


            $("#accordionStatus").accordion({
                active: 0,
                change: function() {
                    var activeIndex = $("#accordionStatus").accordion("option", "active");
                    //alert(activeIndex);
                    switch (activeIndex) {
                    case 0:
                        // $('#chapter2').show();
                            // $('#chapter1').show();
                        break;
                    case 1:
                        // $("#ContentEdit").show();
                            // $('#chapter2').hide();
                            // $('#chapter1').hide();
                        break;
                    default:
                    }

                }
            });

            /*All post data to controller go thorugh this function*/

            function PostArray(url, descriptionArray) {
                jQuery.ajax({
                    type: 'POST',
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(descriptionArray),
                    async: false,
                    dataType: "json",
                    success: function(statusMsg) {

                        descriptionArray.length = 0;
                    },
                    error: function(statusMsg) {
                        AddTextToStatus("Couldn't send message.Wrong parameters");
                    }
                });
            }
 
    </script>
}


